<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Doctrine\ORM\EntityManagerInterface;
use App\Entity\Producto;
use App\Form\ProductoType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\File\File;

class ProductoController extends AbstractController
{

    public function list(EntityManagerInterface $em)
    {
        $repository = $em->getRepository(Producto::class);
        $productos = $repository->findAll();

        $encoders = [new XmlEncoder(), new JsonEncoder()];
        $normalizers = [new ObjectNormalizer()];

        $serializer = new Serializer($normalizers, $encoders);


        return new Response($serializer->serialize($productos, 'json'));
    }

    public function new(Request $request, EntityManagerInterface $em)
    {
        $item = new Producto();
        $form = $this->createForm(ProductoType::class, $item);
        $form->handleRequest($request);


        if ($form->isSubmitted() && $form->isValid()) {
            /** @var UploadedFile $file*/
            $file = $item->getImage();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            dump($file->getFilename());

            try {
                $uploaddir = "uploads/productos/". $fileName;
                $subido = move_uploaded_file($file, $uploaddir);
                $item->setImage($fileName);
                $em->persist($item);
                $em->flush();
            } catch (\Exception $e) {
                dump($e);
            }


            return $this->redirectToRoute('productos');
        }


        return $this->render('admin_view/producto/productosNew.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
